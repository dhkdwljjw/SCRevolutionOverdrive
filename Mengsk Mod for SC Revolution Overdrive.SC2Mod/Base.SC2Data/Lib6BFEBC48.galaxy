include "TriggerLibs/NativeLib"

include "Lib6BFEBC48_h"

//--------------------------------------------------------------------------------------------------
// Library: Mengsk
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib6BFEBC48_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib6BFEBC48_InitVariables_completed = false;

void lib6BFEBC48_InitVariables () {
    if (lib6BFEBC48_InitVariables_completed) {
        return;
    }

    lib6BFEBC48_InitVariables_completed = true;

    lib6BFEBC48_gv_cM_Mengsk_XPHungryUnits = UnitGroupEmpty();
    lib6BFEBC48_gv_cM_Mengsk_VeteranUnits = UnitGroupEmpty();
    lib6BFEBC48_gv_cM_Mengsk_PropagandaUnits = UnitGroupEmpty();
}

// Functions
trigger auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_Trigger = null;
unit auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_attacker;
fixed auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_searchRadius;
fixed auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
fixed auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
unitfilter auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_targetFilter;
unitfilter auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

void lib6BFEBC48_gf_FindandAttackNearestEnemy (unit lp_attacker, fixed lp_searchRadius, fixed lp_satisfiedPathingDistance, fixed lp_thinkPeriod, unitfilter lp_targetFilter, unitfilter lp_fallbackTargetFilter) {
    auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_attacker = lp_attacker;
    auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_searchRadius = lp_searchRadius;
    auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance = lp_satisfiedPathingDistance;
    auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_thinkPeriod = lp_thinkPeriod;
    auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_targetFilter = lp_targetFilter;
    auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter = lp_fallbackTargetFilter;

    if (auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_Trigger == null) {
        auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_Trigger = TriggerCreate("auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_TriggerFunc");
    }

    TriggerExecute(auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_Trigger, false, false);
}

bool auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attacker = auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_attacker;
    fixed lp_searchRadius = auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_searchRadius;
    fixed lp_satisfiedPathingDistance = auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
    fixed lp_thinkPeriod = auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
    unitfilter lp_targetFilter = auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_targetFilter;
    unitfilter lp_fallbackTargetFilter = auto_lib6BFEBC48_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

    // Variable Declarations
    fixed lv_safethinkperiod;
    point lv_attacktargetpoint;
    unit lv_bestattacktargetunit;
    fixed lv_bestpathingdistance;
    unit lv_currentattacktargetunit;
    fixed lv_currentpathingdistance;

    // Automatic Variable Declarations
    unitgroup autoF2E330D0_g;
    int autoF2E330D0_u;

    // Variable Initialization
    lv_safethinkperiod = MaxF(lp_thinkPeriod, 0.5);

    // Implementation
    while ((UnitIsAlive(lp_attacker) == true)) {
        lv_bestpathingdistance = 10000.0;
        autoF2E330D0_g = UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_attacker), lp_searchRadius), lp_targetFilter, 0);
        autoF2E330D0_u = UnitGroupCount(autoF2E330D0_g, c_unitCountAll);
        for (;; autoF2E330D0_u -= 1) {
            lv_currentattacktargetunit = UnitGroupUnitFromEnd(autoF2E330D0_g, autoF2E330D0_u);
            if (lv_currentattacktargetunit == null) { break; }
            if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_currentattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_currentattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_currentattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                lv_currentpathingdistance = AIPathingCostUnit(lp_attacker, UnitGetPosition(lv_currentattacktargetunit), c_ignoreEnemyBuildings);
                if ((lv_currentpathingdistance < lp_satisfiedPathingDistance)) {
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                    break;
                }
                else if ((lv_currentpathingdistance < lv_bestpathingdistance)) {
                    lv_bestpathingdistance = lv_currentpathingdistance;
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                }
            }

        }
        if ((UnitIsAlive(lv_bestattacktargetunit) == false)) {
            lv_bestattacktargetunit = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionEntireMap(), lp_fallbackTargetFilter, 0), UnitGetPosition(lp_attacker));
        }

        if ((UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
            while ((UnitIsAlive(lp_attacker) == true) && (UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_bestattacktargetunit)), c_orderQueueReplace);
                Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
            }
        }
        else {
            Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
        }
    }
    return true;
}

void lib6BFEBC48_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points) {
    // Variable Declarations
    int lv_originalminpoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalminpoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lp_points));
    UnitBehaviorRemove(lp_unit, lp_attribute, 1);
    UnitBehaviorAdd(lp_unit, lp_attribute, lp_unit, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lv_originalminpoints));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: MengskTriggerSet
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskTriggerSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isMengsk;

    // Automatic Variable Declarations
    playergroup auto49882371_g;
    int auto49882371_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto49882371_g = PlayerGroupAll();
    auto49882371_var = -1;
    while (true) {
        auto49882371_var = PlayerGroupNextPlayer(auto49882371_g, auto49882371_var);
        if (auto49882371_var < 0) { break; }
        if ((PlayerRace(auto49882371_var) == "TerM")) {
            lv_isMengsk = true;
            UISetResourceVisible(PlayerGroupSingle(auto49882371_var), c_resourceTypeCustom, true);
            PlayerSetCommander(auto49882371_var, "UIMengsk");
            PlayerSetDifficulty(auto49882371_var, 0);
            libNtve_gf_SetUpgradeLevelForPlayer(auto49882371_var, "AnnouncerMengsk", 1);
        }

    }
    if ((lv_isMengsk == true)) {
        TriggerEnable(lib6BFEBC48_gt_MengskArtilleryCargo, true);
        TriggerEnable(lib6BFEBC48_gt_MengskVeteranRegister, true);
        TriggerEnable(lib6BFEBC48_gt_MengskVeteranFullLevel, true);
        TriggerEnable(lib6BFEBC48_gt_MengskVeteranLevelUpStar, true);
        TriggerEnable(lib6BFEBC48_gt_MengskVeteranGetXP, true);
        TriggerEnable(lib6BFEBC48_gt_MengskVeteranUnlockXP, true);
        TriggerEnable(lib6BFEBC48_gt_MengskPropagandaOn, true);
        TriggerEnable(lib6BFEBC48_gt_MengskPropagandaOff, true);
        TriggerEnable(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport, true);
        TriggerEnable(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar, true);
        TriggerEnable(lib6BFEBC48_gt_TrooperMengskEnlistingAB, true);
        TriggerEnable(lib6BFEBC48_gt_TrooperMengskEnlistingRB, true);
        TriggerEnable(lib6BFEBC48_gt_MengskZergReleaseAutoAttack, true);
        TriggerEnable(lib6BFEBC48_gt_MengskZergReleaseSupply, true);
        TriggerEnable(lib6BFEBC48_gt_MengskZergReadySupply, true);
        TriggerExecute(lib6BFEBC48_gt_MengskEnergyCount, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskTriggerSet_Init () {
    lib6BFEBC48_gt_MengskTriggerSet = TriggerCreate("lib6BFEBC48_gt_MengskTriggerSet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskArtilleryCargo
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskArtilleryCargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    int lv_cargoCount;
    string lv_cargoCountBehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artillery = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cargoCount = UnitGroupCount(UnitCargoGroup(lv_artillery), c_unitCountAlive);
    lv_cargoCountBehavior = "ArtilleryMengskCargo";

    // Actions
    if (!runActions) {
        return true;
    }

    lib6BFEBC48_gf_SetUnitAttributePoints(lv_cargoCountBehavior, lv_artillery, lv_cargoCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskArtilleryCargo_Init () {
    lib6BFEBC48_gt_MengskArtilleryCargo = TriggerCreate("lib6BFEBC48_gt_MengskArtilleryCargo_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskArtilleryCargo, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskArtilleryCargo, c_playerAny, "ArtilleryMengskCargoTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskVeteranRegister
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskVeteranRegister_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib6BFEBC48_gv_cM_Mengsk_XPHungryUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupAdd(lib6BFEBC48_gv_cM_Mengsk_VeteranUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskVeteranRegister_Init () {
    lib6BFEBC48_gt_MengskVeteranRegister = TriggerCreate("lib6BFEBC48_gt_MengskVeteranRegister_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskVeteranRegister, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskVeteranRegister, c_playerAny, "MengskVeteranTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskVeteranFullLevel
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskVeteranFullLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    UnitGroupRemove(lib6BFEBC48_gv_cM_Mengsk_XPHungryUnits, lv_levellingunit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskVeteranFullLevel_Init () {
    lib6BFEBC48_gt_MengskVeteranFullLevel = TriggerCreate("lib6BFEBC48_gt_MengskVeteranFullLevel_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskVeteranFullLevel, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskVeteranFullLevel, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskVeteranLevelUpStar
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskVeteranLevelUpStar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskVeteranLevelUpStar_Init () {
    lib6BFEBC48_gt_MengskVeteranLevelUpStar = TriggerCreate("lib6BFEBC48_gt_MengskVeteranLevelUpStar_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskVeteranLevelUpStar, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskVeteranLevelUpStar, c_playerAny, "MengskVeteranLevelUpDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskVeteranGetXP
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskVeteranGetXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    fixed lv_xp;
    unitgroup lv_veteranunits;
    int lv_veterancount;
    fixed lv_xppersupplyratio;
    fixed lv_heroicxpoverride;
    fixed lv_minimumearnedxp;
    fixed lv_xpradius;

    // Automatic Variable Declarations
    unitgroup auto650D4BEC_g;
    int auto650D4BEC_u;
    unit auto650D4BEC_var;

    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_veteranunits = UnitGroupEmpty();
    lv_xppersupplyratio = 100.0;
    lv_heroicxpoverride = 800.0;
    lv_minimumearnedxp = 1.0;
    lv_xpradius = 15.0;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_dyingunit, libNtve_gf_KillingPlayer(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_veteranunits = UnitGroupFilterRegion(lib6BFEBC48_gv_cM_Mengsk_XPHungryUnits, RegionCircle(UnitGetPosition(lv_dyingunit), lv_xpradius), 0);
    lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
    lv_xp = (UnitTypeGetProperty(UnitGetType(lv_dyingunit), c_unitPropSuppliesUsed) * lv_xppersupplyratio);
    if ((lv_xp <= 0.0)) {
        return true;
    }
    if ((lv_veterancount == 0)) {
        lv_veteranunits = UnitGroupCopy(lib6BFEBC48_gv_cM_Mengsk_XPHungryUnits);
        lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
        if ((lv_veterancount == 0)) {
            return true;
        }

    }

    lv_xp = MaxF(Round((lv_xp / lv_veterancount)), lv_minimumearnedxp);
    auto650D4BEC_g = lv_veteranunits;
    auto650D4BEC_u = UnitGroupCount(auto650D4BEC_g, c_unitCountAll);
    for (;; auto650D4BEC_u -= 1) {
        auto650D4BEC_var = UnitGroupUnitFromEnd(auto650D4BEC_g, auto650D4BEC_u);
        if (auto650D4BEC_var == null) { break; }
        UnitXPAddXP(auto650D4BEC_var, null, lv_xp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskVeteranGetXP_Init () {
    lib6BFEBC48_gt_MengskVeteranGetXP = TriggerCreate("lib6BFEBC48_gt_MengskVeteranGetXP_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskVeteranGetXP, false);
    TriggerAddEventUnitDied(lib6BFEBC48_gt_MengskVeteranGetXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskVeteranUnlockXP
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskVeteranUnlockXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2147EF6A_g;
    int auto2147EF6A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2147EF6A_g = PlayerGroupAll();
    auto2147EF6A_var = -1;
    while (true) {
        auto2147EF6A_var = PlayerGroupNextPlayer(auto2147EF6A_g, auto2147EF6A_var);
        if (auto2147EF6A_var < 0) { break; }
        if ((PlayerRace(auto2147EF6A_var) == "TerM")) {
            MeleeSetOption(auto2147EF6A_var, c_meleeOptionXPGainDisable, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskVeteranUnlockXP_Init () {
    lib6BFEBC48_gt_MengskVeteranUnlockXP = TriggerCreate("lib6BFEBC48_gt_MengskVeteranUnlockXP_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskVeteranUnlockXP, false);
    TriggerAddEventTimeElapsed(lib6BFEBC48_gt_MengskVeteranUnlockXP, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskEnergyCount
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskEnergyCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mengskEnergy;
    fixed lv_mengskVeteranSupply;
    fixed lv_mengskPropagandaSupply;

    // Automatic Variable Declarations
    playergroup autoA63062BA_g;
    int autoA63062BA_var;
    unitgroup auto62E37187_g;
    int auto62E37187_u;
    unit auto62E37187_var;
    unitgroup auto40C90C2D_g;
    int auto40C90C2D_u;
    unit auto40C90C2D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while (true) {
        autoA63062BA_g = PlayerGroupAll();
        autoA63062BA_var = -1;
        while (true) {
            autoA63062BA_var = PlayerGroupNextPlayer(autoA63062BA_g, autoA63062BA_var);
            if (autoA63062BA_var < 0) { break; }
            if ((PlayerRace(autoA63062BA_var) == "TerM")) {
                lv_mengskVeteranSupply = 0.0;
                lv_mengskPropagandaSupply = 0.0;
                auto62E37187_g = UnitGroupFilterPlayer(lib6BFEBC48_gv_cM_Mengsk_VeteranUnits, autoA63062BA_var, 0);
                auto62E37187_u = UnitGroupCount(auto62E37187_g, c_unitCountAll);
                for (;; auto62E37187_u -= 1) {
                    auto62E37187_var = UnitGroupUnitFromEnd(auto62E37187_g, auto62E37187_u);
                    if (auto62E37187_var == null) { break; }
                    lv_mengskVeteranSupply = (lv_mengskVeteranSupply + (UnitXPGetCurrentLevel(auto62E37187_var, null) * (UnitTypeGetProperty(UnitGetType(auto62E37187_var), c_unitPropSuppliesUsed) * 0.5)));
                }
                auto40C90C2D_g = UnitGroupFilterPlayer(lib6BFEBC48_gv_cM_Mengsk_PropagandaUnits, autoA63062BA_var, 0);
                auto40C90C2D_u = UnitGroupCount(auto40C90C2D_g, c_unitCountAll);
                for (;; auto40C90C2D_u -= 1) {
                    auto40C90C2D_var = UnitGroupUnitFromEnd(auto40C90C2D_g, auto40C90C2D_u);
                    if (auto40C90C2D_var == null) { break; }
                    if ((TechTreeUpgradeCount(1, "BlimpMengskTopbarRegen", c_techCountCompleteOnly) >= 1)) {
                        lv_mengskPropagandaSupply = (lv_mengskPropagandaSupply + 2.0);
                    }
                    else {
                        lv_mengskPropagandaSupply = (lv_mengskPropagandaSupply + 1.0);
                    }
                }
                lv_mengskEnergy = (lv_mengskEnergy + ((lv_mengskVeteranSupply + lv_mengskPropagandaSupply) / 20.0));
                PlayerModifyPropertyInt(autoA63062BA_var, c_playerPropCustom, c_playerPropOperAdd, TruncI(lv_mengskEnergy));
                lv_mengskEnergy = (lv_mengskEnergy - Trunc(lv_mengskEnergy));
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskEnergyCount_Init () {
    lib6BFEBC48_gt_MengskEnergyCount = TriggerCreate("lib6BFEBC48_gt_MengskEnergyCount_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskEnergyCount, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskPropagandaOn
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskPropagandaOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCVMengsk") || (UnitGetType(EventUnit()) == "TrooperMengsk") || (UnitGetType(EventUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnit()) == "TrooperMengskImproved")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib6BFEBC48_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskPropagandaOn_Init () {
    lib6BFEBC48_gt_MengskPropagandaOn = TriggerCreate("lib6BFEBC48_gt_MengskPropagandaOn_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskPropagandaOn, false);
    TriggerAddEventUnitBehaviorChange(lib6BFEBC48_gt_MengskPropagandaOn, null, "PropagandaBlastMengsk", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskPropagandaOff
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskPropagandaOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengsk") < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib6BFEBC48_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskPropagandaOff_Init () {
    lib6BFEBC48_gt_MengskPropagandaOff = TriggerCreate("lib6BFEBC48_gt_MengskPropagandaOff_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskPropagandaOff, false);
    TriggerAddEventUnitBehaviorChange(lib6BFEBC48_gt_MengskPropagandaOff, null, "PropagandaBlastMengsk", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskMedivacSiegeTankSiegedTransport
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_siegetank;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedivacMengskSiegeTankAirliftLoadTrigger")) {
        UnitBehaviorAdd(lv_medivac, "MedivacMengskSiegeTankAirlift", lv_medivac, 1);
        lib6BFEBC48_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
        DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
        lv_statusframe = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    }
    else {
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirlift", 1);
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirliftLevel", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport_Init () {
    lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport = TriggerCreate("lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport, c_playerAny, "MedivacMengskSiegeTankAirliftLoadTrigger");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport, c_playerAny, "MedivacMengskSiegeTankAirliftUnloadTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskMedivacSiegeTankSiegedLevelUpStar
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegetank;
    unit lv_medivac;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_medivac = UnitTransport(lv_siegetank);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_siegetank) == "SiegeTankMengskSieged"))) {
            return false;
        }

        if (!((lv_medivac != null))) {
            return false;
        }

        if (!((UnitGetType(lv_medivac) == "MedivacMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6BFEBC48_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar_Init () {
    lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar = TriggerCreate("lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar, c_playerAny, "MengskVeteranLevelUpDummy");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrooperMengskEnlistingAB
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_TrooperMengskEnlistingAB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingAB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_TrooperMengskEnlistingAB_Init () {
    lib6BFEBC48_gt_TrooperMengskEnlistingAB = TriggerCreate("lib6BFEBC48_gt_TrooperMengskEnlistingAB_Func");
    TriggerEnable(lib6BFEBC48_gt_TrooperMengskEnlistingAB, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingAB, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingAB, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrooperMengskEnlistingRB
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_TrooperMengskEnlistingRB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingRB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_TrooperMengskEnlistingRB_Init () {
    lib6BFEBC48_gt_TrooperMengskEnlistingRB = TriggerCreate("lib6BFEBC48_gt_TrooperMengskEnlistingRB_Func");
    TriggerEnable(lib6BFEBC48_gt_TrooperMengskEnlistingRB, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingRB, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingRB, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingRB, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingRB, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingRB, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib6BFEBC48_gt_TrooperMengskEnlistingRB, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskZergReleaseAutoAttack
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskZergReleaseAutoAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib6BFEBC48_gf_FindandAttackNearestEnemy(EventPlayerEffectUsedUnit(c_effectUnitCaster), 30.0, 6.0, 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskZergReleaseAutoAttack_Init () {
    lib6BFEBC48_gt_MengskZergReleaseAutoAttack = TriggerCreate("lib6BFEBC48_gt_MengskZergReleaseAutoAttack_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskZergReleaseAutoAttack, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReleaseAutoAttack, c_playerAny, "MengskSeekDestroyTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskZergReadySupply
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskZergReadySupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto0C1A7D73_val;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperAdd, 6);
    auto0C1A7D73_val = EventPlayerEffectUsed();
    if (auto0C1A7D73_val == "ScienceFacilityZerglingsSet") {
        PlayerAddChargeUsed(EventPlayer(), "ZerglingsMengskReady", -1.0);
    }
    else if (auto0C1A7D73_val == "ScienceFacilityHydralisksSet") {
        PlayerAddChargeUsed(EventPlayer(), "HydralisksMengskReady", -1.0);
    }
    else if (auto0C1A7D73_val == "ScienceFacilityMutalisksSet") {
        PlayerAddChargeUsed(EventPlayer(), "MutalisksMengskReady", -1.0);
    }
    else if (auto0C1A7D73_val == "ScienceFacilityUltraliskSet") {
        PlayerAddChargeUsed(EventPlayer(), "UltraliskMengskReady", -1.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskZergReadySupply_Init () {
    lib6BFEBC48_gt_MengskZergReadySupply = TriggerCreate("lib6BFEBC48_gt_MengskZergReadySupply_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskZergReadySupply, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReadySupply, c_playerAny, "ScienceFacilityZerglingsSet");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReadySupply, c_playerAny, "ScienceFacilityHydralisksSet");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReadySupply, c_playerAny, "ScienceFacilityMutalisksSet");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReadySupply, c_playerAny, "ScienceFacilityUltraliskSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MengskZergReleaseSupply
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_gt_MengskZergReleaseSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperSubtract, 6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6BFEBC48_gt_MengskZergReleaseSupply_Init () {
    lib6BFEBC48_gt_MengskZergReleaseSupply = TriggerCreate("lib6BFEBC48_gt_MengskZergReleaseSupply_Func");
    TriggerEnable(lib6BFEBC48_gt_MengskZergReleaseSupply, false);
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReleaseSupply, c_playerAny, "ZerglingMengskSpawnCP");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReleaseSupply, c_playerAny, "HydraliskMengskSpawnCP");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReleaseSupply, c_playerAny, "MutaliskMengskSpawnCP");
    TriggerAddEventPlayerEffectUsed(lib6BFEBC48_gt_MengskZergReleaseSupply, c_playerAny, "UltraliskMengskCU");
}

void lib6BFEBC48_InitTriggers () {
    lib6BFEBC48_gt_MengskTriggerSet_Init();
    lib6BFEBC48_gt_MengskArtilleryCargo_Init();
    lib6BFEBC48_gt_MengskVeteranRegister_Init();
    lib6BFEBC48_gt_MengskVeteranFullLevel_Init();
    lib6BFEBC48_gt_MengskVeteranLevelUpStar_Init();
    lib6BFEBC48_gt_MengskVeteranGetXP_Init();
    lib6BFEBC48_gt_MengskVeteranUnlockXP_Init();
    lib6BFEBC48_gt_MengskEnergyCount_Init();
    lib6BFEBC48_gt_MengskPropagandaOn_Init();
    lib6BFEBC48_gt_MengskPropagandaOff_Init();
    lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedTransport_Init();
    lib6BFEBC48_gt_MengskMedivacSiegeTankSiegedLevelUpStar_Init();
    lib6BFEBC48_gt_TrooperMengskEnlistingAB_Init();
    lib6BFEBC48_gt_TrooperMengskEnlistingRB_Init();
    lib6BFEBC48_gt_MengskZergReleaseAutoAttack_Init();
    lib6BFEBC48_gt_MengskZergReadySupply_Init();
    lib6BFEBC48_gt_MengskZergReleaseSupply_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib6BFEBC48_InitLib_completed = false;

void lib6BFEBC48_InitLib () {
    if (lib6BFEBC48_InitLib_completed) {
        return;
    }

    lib6BFEBC48_InitLib_completed = true;

    lib6BFEBC48_InitLibraries();
    lib6BFEBC48_InitVariables();
    lib6BFEBC48_InitTriggers();
}

